// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  password    String?
  name        String?
  createdAt   DateTime      @default(now())
  TestAttempt TestAttempt[]

  @@map("users")
}

model Skill {
  id          String              @id @default(uuid())
  name        String              @unique
  description String?
  createdAt   DateTime            @default(now())
  tests       CertificationTest[]

  @@map("skills")
}

model CertificationTest {
  id           String        @id @default(uuid())
  title        String
  description  String?
  timeLimit    Int?
  passingScore Float         @default(70.0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  skill        Skill         @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId      String        @unique
  questions    Question[]
  attempts     TestAttempt[]

  @@map("certification_tests")
}

model Question {
  id                  String            @id @default(uuid())
  text                String
  score               Float             @default(1.0)
  explanation         String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  certificationTest   CertificationTest @relation(fields: [certificationTestId], references: [id], onDelete: Cascade)
  certificationTestId String
  alternatives        Alternative[]
  answers             Answer[]

  @@index([certificationTestId])
  @@map("questions")
}

model Alternative {
  id         String   @id @default(uuid())
  text       String
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  answers    Answer[]

  @@index([questionId])
  @@map("alternatives")
}

model TestAttempt {
  id                  String            @id @default(uuid())
  startTime           DateTime          @default(now())
  endTime             DateTime?
  score               Float?
  passed              Boolean?
  completionTime      Int?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  certificationTest   CertificationTest @relation(fields: [certificationTestId], references: [id])
  certificationTestId String
  user                User              @relation(fields: [userId], references: [id])
  userId              String
  answers             Answer[]

  @@index([userId, certificationTestId])
  @@map("test_attempts")
}

model Answer {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  testAttempt   TestAttempt  @relation(fields: [testAttemptId], references: [id], onDelete: Cascade)
  testAttemptId String
  question      Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId    String
  alternative   Alternative? @relation(fields: [alternativeId], references: [id])
  alternativeId String?

  @@unique([testAttemptId, questionId])
  @@map("answers")
}
